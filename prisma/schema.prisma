// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  name       String?
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  projects Project[]

  @@map("mst_user")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     String

  technologies       Technology[]        @relation("ProjectTechnology")
  project_technology ProjectTechnology[]
  project_image      ProjectImage[]
  user               User                @relation(fields: [user_id], references: [id])

  @@map("mst_project")
}

model Technology {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  projects           Project[]           @relation("ProjectTechnology")
  project_technology ProjectTechnology[]

  @@map("mst_technology")
}

model ProjectTechnology {
  id            String @id @default(uuid())
  project_id    String
  technology_id String

  project    Project    @relation(fields: [project_id], references: [id])
  technology Technology @relation(fields: [technology_id], references: [id])

  @@map("trx_project_technology")
}

model ProjectImage {
  id         String   @id @default(uuid())
  project_id String
  url        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project Project @relation(fields: [project_id], references: [id])

  @@map("mst_project_image")
}
